name: Build Android App
run-name: Build Android App - ${{ inputs.environment }}, ${{ inputs.version }}
on:
  workflow_dispatch:
    inputs:
      environment:
        type: string
        required: true
        description: GitHub environment used for the build.
      version:
        type: string
        required: true
        description: Version number to be marked on the build.
        default: '0.0.0-undefined'
      merge-pr:
        type: number
        required: false
        description: Merge a specific PR (by PR number) before building.
      changelog:
        type: string
        required: false
        description: Changelog to be attached for the build.

  workflow_call:
    inputs:
      environment:
        type: string
        required: true
        description: GitHub environment used for the build.
      version:
        type: string
        required: true
        description: Version number to be marked on the build.
        default: '0.0.0-undefined'
      merge-pr:
        type: number
        required: false
        description: Merge a specific PR (by PR number) before building.
      changelog:
        type: string
        required: false
        description: Changelog to be attached for the build.
    outputs:
      version:
        description: "The version of the build."
        value: ${{ jobs.build.outputs.version }}
      # build-number:
      #   description: "The build number of the build."
      #   value: ${{ jobs.build.outputs.build-number }}
      apk-artifact-id:
        description: "The artifact id of the APK."
        value: ${{ jobs.build.outputs.apk-artifact-id }}
      apk-artifact-url:
        description: "The artifact URL of the APK."
        value: ${{ jobs.build.outputs.apk-artifact-url }}
      apk-artifact-name:
        description: "The artifact name of the APK."
        value: ${{ jobs.build.outputs.apk-artifact-name }}
      aab-artifact-id:
        description: "The artifact id of the AAB."
        value: ${{ jobs.build.outputs.aab-artifact-id }}
      aab-artifact-url:
        description: "The artifact URL of the AAB."
        value: ${{ jobs.build.outputs.aab-artifact-url }}
      aab-artifact-name:
        description: "The artifact name of the AAB."
        value: ${{ jobs.build.outputs.aab-artifact-name }}
      install-url:
        description: "URL to install the built app."
        value: ${{ jobs.build-ios.outputs.install-url }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    timeout-minutes: 60
    environment:
      name: ${{ inputs.environment }}
      url: ${{ steps.upload-to-appsend.outputs.install_url || null }}
    outputs:
      version: ${{ steps.get-version-number.outputs.version }}
      # build-number: ${{ steps.update-build-number.outputs.build_number }}
      apk-artifact-id: ${{ steps.upload-apk.outputs.artifact-id }}
      apk-artifact-url: ${{ steps.upload-apk.outputs.artifact-url }}
      apk-artifact-name: ${{ steps.get-apk-artifact-name.outputs.apk_artifact_name }}
      aab-artifact-id: ${{ steps.upload-aab.outputs.artifact-id }}
      aab-artifact-url: ${{ steps.upload-aab.outputs.artifact-url }}
      aab-artifact-name: ${{ steps.get-aab-artifact-name.outputs.aab_artifact_name }}
      install-url: ${{ steps.upload-to-appsend.outputs.install_url }}
    defaults:
      run:
        working-directory: apps/rn-app
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Merge PR
        if: ${{ inputs.merge-pr && inputs.merge-pr != '0' }}
        uses: ./.github/actions/merge-pr
        with:
          pr-number: ${{ inputs.merge-pr }}
          github-token: ${{ github.token }}

      - name: Setup environment
        uses: ./.github/actions/setup-environment

      - name: Get version number
        id: get-version-number
        env:
          VERSION: ${{ inputs.version || '0.0.0-undefined' }}
          IGNORE_PATCH_VERSION: ${{ vars.IGNORE_PATCH_VERSION }}
        run: |
          full_version="${VERSION/#v/}"
          echo "Full Version: ${full_version}"
          echo "full_version=${full_version}" >> $GITHUB_OUTPUT
          version=$(echo $full_version | cut -d'-' -f1)
          if [ "$IGNORE_PATCH_VERSION" = 'true' ]; then
            # Make the patch version 0 if it is not 0
            version=$(echo $version | awk -F. '{print $1"."$2".0"}')
          fi
          echo "Version: ${version}"
          echo "version=${version}" >> $GITHUB_OUTPUT
          if [ "$IGNORE_PATCH_VERSION" = 'true' ]; then
            echo "(Patch Version is ignored and set to 0 because IGNORE_PATCH_VERSION is set to true)"
          fi

      - name: Prepare product info
        env:
          PRODUCT_JSON: ${{ vars.PRODUCT_JSON }}
        run: |
          if [ -z "$PRODUCT_JSON" ]; then
            echo "Using product.json5.example"
            cp product.json5.example product.json5
          else
            echo "Using PRODUCT_JSON environment variable"
            echo "$PRODUCT_JSON" > product.json5
          fi

          cat product.json5

      - name: Write app.json
        env:
          VERSION: ${{ steps.get-version-number.outputs.version }}
          FULL_VERSION: ${{ steps.get-version-number.outputs.full_version }}
        run: |
          echo "{\"version\": \"$VERSION\", \"fullVersion\": \"$FULL_VERSION\", \"extra\": { \"fullVersion\": \"$FULL_VERSION\" } }" | jq '.' > app.json
          cat app.json

      - name: Prebuild
        env:
          ENVIRONMENT: ${{ vars.ENVIRONMENT }}
        run: |
          if [ -z "$ENVIRONMENT" ]; then
            echo '[ERROR] Environment variable "ENVIRONMENT" is not set.'
          fi

          yarn prebuild android "$ENVIRONMENT"

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1.172.0
        with:
          ruby-version: '3.0'

      - name: Install Fastlane
        run: |
          gem install fastlane:2.219.0 rb_json5

      - name: Set up JDK 1.8
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2

      - name: Prepare keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: |
          if [ -z "$KEYSTORE_BASE64" ]; then
            echo '[ERROR] Environment secret "KEYSTORE_BASE64" is not set.'
          fi
          echo $KEYSTORE_BASE64 | base64 --decode > keystore.keystore

      # - name: BuildCache
      #   uses: mikehardy/buildcache-action@v2
      #   env:
      #     cache-name: rn-app
      #   with:
      #     cache_key: ${{ runner.os }}-${{ env.cache-name }}-${{ vars.environment }}
      # - name: ccache
      #   uses: hendrikmuhs/ccache-action@v1.2
      #   env:
      #     cache-name: rn-app-ccache
      #   with:
      #     key: ${{ runner.os }}-${{ env.cache-name }}-${{ vars.environment }}

      - name: Build
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ vars.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          if [ -z "$KEYSTORE_PASSWORD" ]; then
            echo '[ERROR] Environment secret "KEYSTORE_PASSWORD" is not set.'
          fi
          if [ -z "$KEY_ALIAS" ]; then
            echo '[ERROR] Environment variable "KEY_ALIAS" is not set.'
          fi
          if [ -z "$KEY_PASSWORD" ]; then
            echo '[ERROR] Environment secret "KEY_PASSWORD" is not set.'
          fi

          fastlane android build

      - name: Get APK Artifact name
        id: get-apk-artifact-name
        run: |
          apk_artifact_name="${{ inputs.environment }} APK"
          echo "APK Artifact name: $apk_artifact_name"
          echo "apk_artifact_name=$apk_artifact_name" >> $GITHUB_OUTPUT

      - name: Upload APK
        id: upload-apk
        uses: actions/upload-artifact@v4.3.1
        with:
          name: ${{ steps.get-apk-artifact-name.outputs.apk_artifact_name }}
          path: |
            apps/rn-app/*.apk

      - name: Get AAB Artifact name
        id: get-aab-artifact-name
        run: |
          aab_artifact_name="${{ inputs.environment }} AAB"
          echo "AAB Artifact name: $aab_artifact_name"
          echo "aab_artifact_name=$aab_artifact_name" >> $GITHUB_OUTPUT

      - name: Upload AAB
        id: upload-aab
        uses: actions/upload-artifact@v4.3.1
        with:
          name: ${{ steps.get-aab-artifact-name.outputs.aab_artifact_name }}
          path: |
            apps/rn-app/*.aab

      - name: Upload to AppSend
        id: upload-to-appsend
        if: ${{ vars.SKIP_UPLOAD != 'true' }}
        continue-on-error: true
        run: |
          result=$(curl --insecure https://api.appsend.dev/v1/uploads/ -F file=@"$(ls *.apk | head -n 1)") # we have encountered issues with the SSL certificate of this server on the GitHub Actions runner, therefore --insecure is used
          echo $result | jq '.'
          uid="$(echo $result | jq -r '.uid')"
          if [ -z "$uid" ]; then
            echo "[ERROR] Failed to upload to AppSend: $result"
            exit 1
          fi
          install_url="https://appsend.dev/i/$uid"
          echo "Download URL: $install_url"
          echo "install_url=$install_url" >> $GITHUB_OUTPUT
