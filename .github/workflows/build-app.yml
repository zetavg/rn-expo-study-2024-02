name: Build App
run-name: ${{ (
    ((github.event_name == 'pull_request' || github.event_name == 'pull_request_target') && format('Build for PR {0}{1}', '#', github.event.pull_request.number)) ||
    (inputs.merge-pr && format('Build for PR {0}{1}', '#', inputs.merge-pr)) ||
    (github.event_name == 'release' && format('Release {0}', github.event.release.tag_name)) ||
    (github.event_name == 'schedule' && format('Scheduled Build')) ||
    'Build App'
  ) }}
on:
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  pull_request_target:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  release:
    types: [published]
  # schedule:
  #   # Every 5 minutes
  #   - cron: '*/5 * * * *'

  workflow_dispatch:
    inputs:
      merge-pr:
        type: number
        required: false
        description: Merge a specific PR (by PR number) before building.

jobs:
  collect-build-info:
    name: Collect Build Info
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      build-notes: ${{ steps.generate-build-notes.outputs.build-notes }}
      should-build: ${{ steps.should-build.outputs.should_build }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          filter: 'blob:none' # https://github.blog/2020-12-21-get-up-to-speed-with-partial-clone-and-shallow-clone/#user-content-blobless-clones
      - name: Get version
        id: get-version
        run: |
          version_tag=$(git describe --tags || echo "v0.0.0-$(git rev-list --count HEAD)-$(git rev-parse --short=8 HEAD)")
          version="${version_tag/#v/}"
          echo "Version: $version"
          echo "version=${version}" >> $GITHUB_OUTPUT
      - name: Generate build notes
        id: generate-build-notes
        uses: zetavg/generate-build-notes-action@b81a0186d75ad772b3bf7b4a602ca9a0c8bbb34f
        with:
          github-token: ${{ github.token }}
          pr-number: ${{ github.event.pull_request.number || (inputs.merge-pr && fromJson(inputs.merge-pr)) || 0 }}
      - name: Determine if we should build
        id: should-build
        env:
          GITHUB_API_URL: ${{ github.api_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_TOKEN: ${{ github.token }}
          IS_PR_SKIP_BUILD: ${{ contains(github.event.pull_request.labels.*.name, 'skip-app-build') }}
          IS_PR_DRAFT: ${{ github.event.pull_request.draft }}
          IS_PR_FROM_FORK: ${{ github.event.pull_request.head.repo.fork }}
          PR_NUMBER: ${{ github.event.pull_request.number || inputs.merge-pr }}
        run: |
          if [ "$IS_PR_SKIP_BUILD" = 'true' ]; then
            echo "PR has the 'skip-app-build' label, skipping build."
            echo "should_build=false" >> $GITHUB_OUTPUT

          elif [ "$IS_PR_DRAFT" = 'true' ]; then
            echo "PR is a draft, skipping build."
            echo "should_build=false" >> $GITHUB_OUTPUT

          elif [ "$IS_PR_FROM_FORK" = 'true' ]; then
            echo "PR is from a fork, skipping build."
            echo "should_build=false" >> $GITHUB_OUTPUT

            # Comment on the PR to let the user know why the build was skipped.
            # Also, add the 'skip-app-build' label to the PR to skip the build in the future while prevent the comment from being posted again.
            curl -L --silent \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/issues/$PR_NUMBER/comments" \
              -d '{"body":"Thanks for the PR! Since this PR is from a fork, building the app will be skipped for security reasons. You'\''ll need help from a maintainer to trigger a build manually.\n\nIf you are a maintainer, once you'\''ve confirmed that the changes are safe[^1], you can run the [Build App workflow](${{ github.server_url }}/${{ github.repository }}/actions/workflows/build-app.yml) with \"merge-pr\" `${{ github.event.pull_request.number }}` to start a build for this PR.\n\n[^1]: Check for code that may expose or abuse build secrets, and code that might abuse or damage the user'\''s data or device."}'
            curl -L --silent \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/issues/$PR_NUMBER/labels" \
              -d '{"labels":["skip-app-build"]}'

          else
            echo "should_build=true" >> $GITHUB_OUTPUT
          fi

  build-ios-app:
    name: Build iOS App
    if: ${{ needs.collect-build-info.outputs.should-build == 'true' }}
    needs:
      - collect-build-info
    uses: ./.github/workflows/build-ios-app.yml
    secrets: inherit
    permissions:
      contents: read
      pull-requests: read
    with:
      environment: iOS
      version: ${{ needs.collect-build-info.outputs.version }}
      merge-pr: ${{ github.event.pull_request.number || (inputs.merge-pr && fromJson(inputs.merge-pr)) || 0 }}
      changelog: ${{ needs.collect-build-info.outputs.build-notes }}

  publish-results:
    name: Publish Results
    if: ${{ needs.collect-build-info.outputs.should-build == 'true' }}
    needs:
      - collect-build-info
      - build-ios-app
    permissions:
      contents: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: 'Comment on PR'
        if: ${{ github.event_name == 'pull_request' || github.event_name == 'pull_request_target' || inputs.merge-pr }}
        env:
          GITHUB_API_URL: ${{ github.api_url }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ github.event.pull_request.number || inputs.merge-pr }}
        run: |
          curl -L --silent \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "$GITHUB_API_URL/repos/$GITHUB_REPOSITORY/issues/$PR_NUMBER/comments" \
            -d '{"body":"⚒️ A [build](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) has been made for this PR. Check the details below to see how to get it.\n<details><summary>Details</summary>\n\n* **iOS**: ${{ needs.build-ios-app.outputs.testflight-upload-succeeded && format('`{0} ({1})` has been uploaded to TestFlight. You can also download the Xcode archive [here]({2}).', needs.build-ios-app.outputs.version, needs.build-ios-app.outputs.build-number, needs.build-ios-app.outputs.archive-artifact-url) || format('Download the Xcode archive of `{0} ({1})` [here]({2}). This build is not being uploaded to TestFlight.', needs.build-ios-app.outputs.version, needs.build-ios-app.outputs.build-number, needs.build-ios-app.outputs.archive-artifact-url) }}\n\n> <small>\n> If you are in the Internal Developer group on TestFlight, the iOS build should appear on TestFlight in a few minutes (if uploaded).\n> If you are not in the in the Internal Developer group and want to try the build, please contact a maintainer for access.\n> </small>\n\n**Tip**: Add the `skip-app-build` label to this PR or convert this PR to draft to disable automatic builds.</details>"}'
      - name: Download iOS Archive artifact for release
        uses: actions/download-artifact@v4
        if: ${{ github.event_name == 'release' }}
        with:
          name: ${{ needs.build-ios-app.outputs.archive-artifact-name }}
      - name: Upload iOS Archive for release
        if: ${{ github.event_name == 'release' }}
        env:
          UPLOAD_URL: ${{ github.event.release.upload_url }}
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          zip -r xcode-archive.zip *.xcarchive

          asset_name='xcode-archive.zip'
          asset_upload_url="$(echo $UPLOAD_URL | sed "s/{[^}]*}\$/?name=${asset_name}/")"

          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            -H "Content-Type: application/octet-stream" \
            "$asset_upload_url" \
            --data-binary "@xcode-archive.zip" --fail --show-error
