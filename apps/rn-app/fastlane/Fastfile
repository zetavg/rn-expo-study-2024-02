require 'json'
require 'rb_json5'
require 'net/http'
require 'uri'

platform :ios do
  lane :setup_app_store_connect do
    app_store_connect_api_key_id = ENV['APP_STORE_CONNECT_API_KEY_ID']
    app_store_connect_api_issuer_id = ENV['APP_STORE_CONNECT_API_ISSUER_ID']
    app_store_connect_api_key_content = ENV['APP_STORE_CONNECT_API_KEY_CONTENT']

    raise "Environment variable 'APP_STORE_CONNECT_API_KEY_ID' is not set." if app_store_connect_api_key_id.nil? || app_store_connect_api_key_id.empty?
    raise "Environment variable 'APP_STORE_CONNECT_API_ISSUER_ID' is not set." if app_store_connect_api_issuer_id.nil? || app_store_connect_api_issuer_id.empty?
    raise "Environment variable 'APP_STORE_CONNECT_API_KEY_CONTENT' is not set." if app_store_connect_api_key_content.nil? || app_store_connect_api_key_content.empty?

    app_store_connect_api_key(
      key_id: app_store_connect_api_key_id,
      issuer_id: app_store_connect_api_issuer_id,
      key_content: app_store_connect_api_key_content,
    )
  end

  lane :update_build_number do
    xcode_project = get_xcode_project
    app_identifier = get_ios_app_identifier

    setup_app_store_connect

    app_json_file_path = File.join(__dir__, '..', 'app.json')
    app_json_file_contents = File.read(app_json_file_path)
    app_json_data = RbJSON5.parse(app_json_file_contents)
    version = app_json_data['version']

    raise "Cannot get version from 'app.json'" if version.nil? || version.empty?

    last_build_number_from_app_store = app_store_build_number(
      live: false,
      app_identifier: app_identifier,
      version: version,
      initial_build_number: 2,
    )

    github_access_token = ENV['GH_ACCESS_TOKEN']
    github_repository_id = ENV['GITHUB_REPOSITORY_ID']
    github_environment = ENV['GITHUB_ENVIRONMENT']
    using_build_numbers_from_github = true
    if (github_access_token.nil? || github_access_token.empty?) || (github_repository_id.nil? || github_repository_id.empty?) || (github_environment.nil? || github_environment.empty?)
      puts "[ERROR] GH_ACCESS_TOKEN, GITHUB_REPOSITORY_ID or GITHUB_ENVIRONMENT is not set. Will skip using the build number from the GitHub environment. This might cause build number collision and fail to upload the app to the App Store."
      using_build_numbers_from_github = false
    end
    using_build_numbers_from_github_error_notes = "This might cause build number collision and fail to upload the app to the App Store. Please make sure that the GH_ACCESS_TOKEN secret has the correct permissions and is not expired. Also, make sure that the varialbe IOS_LAST_BUILD_NUMBERS exists in the GitHub environment #{github_environment}, if not, you'll need to create it with value set to '{}' manually."

    last_build_numbers = {}
    uri_escaped_github_environment = URI::DEFAULT_PARSER.escape(github_environment)
    if using_build_numbers_from_github
      uri = URI("https://api.github.com/repositories/#{github_repository_id}/environments/#{uri_escaped_github_environment}/variables/IOS_LAST_BUILD_NUMBERS")
      http = Net::HTTP.new(uri.host, uri.port)
      http.use_ssl = true

      request = Net::HTTP::Get.new(uri.request_uri, get_gh_headers(github_access_token))

      begin
        response = http.request(request)
        if response.is_a?(Net::HTTPSuccess)
          response_json = JSON.parse(response.body)
          last_build_numbers = JSON.parse(response_json['value'])
        else
          puts "[ERROR] Getting GitHub Envirement Variable 'IOS_LAST_BUILD_NUMBERS' failed with HTTP status code: #{response.code}. #{using_build_numbers_from_github_error_notes}"
          puts "Response body: #{response.body}"
          using_build_numbers_from_github = false
        end
      rescue => e
        puts "[ERROR] An error occurred while getting GitHub Envirement Variable 'IOS_LAST_BUILD_NUMBERS': #{e.message}. #{using_build_numbers_from_github_error_notes}"
        using_build_numbers_from_github = false
      end
    end

    last_build_number = last_build_numbers[version] || 0

    build_number = [last_build_number_from_app_store, last_build_number].max + 2
    last_build_numbers[version] = build_number

    # Write the current build number to app.json
    app_json_data['ios'] ||= {}
    app_json_data['ios']['currentBuildNumber'] = build_number
    File.write(app_json_file_path, app_json_data.to_json)

    increment_build_number(
      xcodeproj: "ios/#{xcode_project}",
      build_number: build_number,
    )

    if using_build_numbers_from_github
      uri = URI("https://api.github.com/repositories/#{github_repository_id}/environments/#{uri_escaped_github_environment}/variables/IOS_LAST_BUILD_NUMBERS")
      http = Net::HTTP.new(uri.host, uri.port)
      http.use_ssl = true

      request = Net::HTTP::Patch.new(uri.request_uri, get_gh_headers(github_access_token))

      request.body = {
        "name" => 'IOS_LAST_BUILD_NUMBERS',
        "value" => JSON.pretty_generate(last_build_numbers),
      }.to_json

      begin
        response = http.request(request)
        if response.is_a?(Net::HTTPSuccess)
          puts "Update GitHub Envirement Variable 'IOS_LAST_BUILD_NUMBERS' succeeded."
        else
          puts "[ERROR] Update GitHub Envirement Variable 'IOS_LAST_BUILD_NUMBERS' failed with HTTP status code: #{response.code}. #{using_build_numbers_from_github_error_notes}"
          puts "Response body: #{response.body}"
        end
      rescue => e
        puts "[ERROR] An error occurred while updating GitHub Envirement Variable 'IOS_LAST_BUILD_NUMBERS': #{e.message}. #{using_build_numbers_from_github_error_notes}"
      end
    end
  end

  lane :setup_code_signing do |options|
    app_identifier = get_ios_app_identifier
    xcode_project = get_xcode_project

    if ENV['CI']
      # Setup the keychain and match to work with CI.
      setup_ci
    end

    code_signing_storage_git_url = ENV['CODE_SIGNING_STORAGE_GIT_URL']

    if code_signing_storage_git_url.nil? || code_signing_storage_git_url.empty?
      raise "Environment variable 'CODE_SIGNING_STORAGE_GIT_URL' is not set."
    end

    [
      'development',
      'appstore',
    ].each do |type|
      sync_code_signing(
        type: type,
        git_url: code_signing_storage_git_url,
        app_identifier: app_identifier,
        readonly: !options[:update],
        force: !!options[:update],
        username: options[:username],
        team_id: options[:team_id],
      )
    end

    certificate_name = ENV["sigh_#{app_identifier}_development_certificate-name"]
    raise "Cannot get certificate_name" unless certificate_name

    provisioning_profile_path = ENV["sigh_#{app_identifier}_development_profile-path"]
    raise "Cannot get provisioning_profile_path" unless provisioning_profile_path

    team_id = ENV["sigh_#{app_identifier}_development_team-id"]
    raise "Cannot get team_id" unless team_id

    update_code_signing_settings(
      path: "ios/#{xcode_project}",
      use_automatic_signing: false,
      team_id: team_id,
      code_sign_identity: "Apple Development",
    )

    update_project_provisioning(
      xcodeproj: "ios/#{xcode_project}",
      profile: provisioning_profile_path,
    )
  end

  lane :build do |options|
    environment = get_environment('ios')
    product_config = get_product_config(environment)
    xcode_project = get_xcode_project
    xcode_workspace = get_xcode_workspace

    setup_code_signing if options[:setup_code_signing]

    configuration = "Release"
    if environment == 'development'
      puts 'Using build configuration "Debug" for development.'
      configuration = "Debug"
    end

    build_app(
      workspace: "ios/#{xcode_workspace}",
      configuration: configuration,
    )

    app_json_file_path = File.join(__dir__, '..', 'app.json')
    if File.exist?(app_json_file_path)
      backup_xcarchive(
        destination: File.join(__dir__), # Note: '..' is not needed here
        versioned: false,
        zip: false,
      )

      app_json_file_contents = File.read(app_json_file_path)
      app_json_data = RbJSON5.parse(app_json_file_contents)
      version = app_json_data['fullVersion'] || app_json_data['version']

      app_dir_path = File.join(__dir__, '..')
      xcarchive_file_pattern = File.join(app_dir_path, '*.xcarchive')
      xcarchive_file_path = Dir.glob(xcarchive_file_pattern).first
      xcarchive_name = "#{product_config['name']} #{version}.xcarchive"
      File.rename(xcarchive_file_path, File.join(app_dir_path, xcarchive_name))
    end
  end

  lane :lane_upload_to_testflight do |options|
    setup_app_store_connect

    changelog = options[:changelog] || ENV['CHANGELOG']

    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      changelog: changelog,
    )
  end
end

platform :android do
  lane :build do |options|
    environment = get_environment('android')
    product_config = get_product_config(environment)
    android_dir_path = File.join(File.expand_path(__dir__), '..', 'android')

    build_type = "Release"
    if environment == 'development'
      puts 'Using build build_type "Debug" for development.'
      build_type = "Debug"
    end

    keystore_file_path = ENV['KEYSTORE_FILE_PATH'] || File.join(File.expand_path(__dir__), '..', 'keystore.keystore')
    keystore_password = ENV['KEYSTORE_PASSWORD']
    key_alias = ENV['KEY_ALIAS']
    key_password = ENV['KEY_PASSWORD']

    raise "Environment variable 'KEYSTORE_PASSWORD' is not set." if keystore_password.nil? || keystore_password.empty?
    raise "Environment variable 'KEY_ALIAS' is not set." if key_alias.nil? || key_alias.empty?
    raise "Environment variable 'KEY_PASSWORD' is not set." if key_password.nil? || key_password.empty?

    [
      'assemble',
      'bundle',
    ].each do |task|
      gradle(
        project_dir: android_dir_path,
        task: task,
        build_type: build_type,
        print_command: false,
        properties: {
          "KEYSTORE_FILE" => keystore_file_path,
          "KEYSTORE_PASSWORD" => keystore_password,
          "KEY_ALIAS" => key_alias,
          "KEY_PASSWORD" => key_password,
        }
      )
    end

    app_json_file_path = File.join(File.expand_path(__dir__), '..', 'app.json')
    if File.exist?(app_json_file_path)
      app_json_file_contents = File.read(app_json_file_path)
      app_json_data = RbJSON5.parse(app_json_file_contents)
      version = app_json_data['fullVersion'] || app_json_data['version']

      output_apk_path = File.join(android_dir_path, 'app', 'build', 'outputs', 'apk', build_type.downcase, "app-#{build_type.downcase}.apk")

      unless File.exist?(output_apk_path)
        raise "Expect APK file to be at '#{output_apk_path}', but it does not exist."
      end

      # Move the apk file to the root directory
      File.rename(output_apk_path, File.join(File.expand_path(__dir__), '..', "#{product_config['name']} #{version}.apk"))

      output_aab_path = File.join(android_dir_path, 'app', 'build', 'outputs', 'bundle', build_type.downcase, "app-#{build_type.downcase}.aab")

      unless File.exist?(output_aab_path)
        raise "Expect AAB file to be at '#{output_aab_path}', but it does not exist."
      end

      # Move the aab file to the root directory
      File.rename(output_aab_path, File.join(File.expand_path(__dir__), '..', "#{product_config['name']} #{version}.aab"))
    end
  end
end


def get_environment(platform)
  platform_dir_path = File.join(__dir__, '..', platform)

  env_file_path = File.join(platform_dir_path, 'ENVIRONMENT.txt')
  unless File.exist?(env_file_path)
    raise "File 'ENVIRONMENT.txt' does not exist in '#{platform_dir_path}'. 'ENVIRONMENT.txt' is expected to be created by running `yarn prebuild #{platform} <environment>`, please make sure that you have run this command before running the Fastlane lanes."
  end

  environment = File.read(env_file_path).strip

  if environment.nil? || environment.empty?
    raise "File 'ENVIRONMENT.txt' in '#{platform_dir_path}' is empty. Running `yarn prebuild #{platform} <environment>` again might solve the problem."
  end

  return environment
end


def get_product_config(environment)
  product_file_path = File.join(__dir__, '..', 'product.json5')

  unless File.exist?(product_file_path)
    raise "File 'product.json5' does not exist."
  end

  product_file_contents = File.read(product_file_path)
  parsed_product_file_contents = RbJSON5.parse(product_file_contents)

  unless parsed_product_file_contents.has_key?(environment)
    raise "No product configuration found for the '#{environment}' environment. Please check #{product_file_path}, or run `yarn prebuild #{platform} <environment>` again."
  end

  return parsed_product_file_contents[environment]
end


def get_xcode_project
  ios_dir_path = File.join(__dir__, '..', 'ios')

  xcode_project_file_pattern = File.join(ios_dir_path, '*.xcodeproj')
  xcode_project = File.basename(Dir.glob(xcode_project_file_pattern).first)

  return xcode_project
end


def get_xcode_workspace
  ios_dir_path = File.join(__dir__, '..', 'ios')

  xcode_workspace_file_pattern = File.join(ios_dir_path, '*.xcworkspace')
  xcode_workspace = File.basename(Dir.glob(xcode_workspace_file_pattern).first)

  return xcode_workspace
end


def get_ios_app_identifier
  environment = get_environment('ios')
  product_config = get_product_config(environment)

  unless product_config.has_key?('ios')
    raise "No iOS configuration found for the '#{environment}' environment."
  end

  unless product_config['ios'].has_key?('bundleIdentifier')
    raise "No bundleIdentifier found under iOS configuration for the '#{environment}' environment."
  end

  app_identifier = product_config['ios']['bundleIdentifier']
end


def get_gh_headers(access_token)
  {
    "Accept" => "application/vnd.github+json",
    "Authorization" => "token #{access_token}",
    "X-GitHub-Api-Version" => "2022-11-28",
    "Content-Type" => "application/json"
  }
end
